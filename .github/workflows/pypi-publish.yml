name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.1.0, etc.
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Extract and validate version
      id: get_version
      run: |
        # Get version from __about.py (single source of truth) without requiring dependencies
        PACKAGE_VERSION=$(python -c "
        spec = {}
        with open('src/sandroid/__about.py') as f:
            exec(f.read(), spec)
        print(spec['__version__'])
        ")
        echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

        # Extract version from git reference for both tag pushes and releases
        if [[ ${{ github.ref_type }} == "tag" ]]; then
          # Direct tag push: v1.0.0
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "üìã Triggered by tag push: v$TAG_VERSION"
        elif [[ ${{ github.event_name }} == "release" ]]; then
          # Release published: get version from release tag
          TAG_VERSION=${{ github.event.release.tag_name }}
          TAG_VERSION=${TAG_VERSION#v}  # Remove 'v' prefix if present
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "üìã Triggered by release: ${{ github.event.release.tag_name }}"
        else
          # Manual dispatch or other trigger
          echo "tag_version=dev" >> $GITHUB_OUTPUT
          echo "üìã Triggered manually - no version validation needed"
          exit 0
        fi

        # CRITICAL: Validate version match for ALL publishing scenarios
        if [[ "$TAG_VERSION" != "$PACKAGE_VERSION" ]]; then
          echo "‚ùå CRITICAL: Version mismatch detected!"
          echo "   üì¶ Package version (__about.py): $PACKAGE_VERSION"
          echo "   üè∑Ô∏è  Git tag/release version: $TAG_VERSION"
          echo ""
          echo "   Fix by either:"
          echo "   1. Update src/sandroid/__about.py to version $TAG_VERSION, OR"
          echo "   2. Create new tag/release v$PACKAGE_VERSION"
          exit 1
        fi

        echo "‚úÖ Version validation passed: $PACKAGE_VERSION"

    - name: Build package
      run: |
        python -m build

    - name: Check distribution
      run: |
        python -m twine check dist/*

    - name: Publish to Test PyPI (for testing)
      if: github.event_name == 'workflow_dispatch'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        python -m twine upload --repository testpypi dist/*

    - name: Publish to PyPI
      if: github.ref_type == 'tag' || github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*

    - name: Create GitHub Release
      if: github.ref_type == 'tag'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
