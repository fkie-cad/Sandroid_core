name: Publish to PyPI

on:
  # Run on any push to main (we'll gate on "about file changed" inside the job),
  # and also on tag pushes that match v*.
  push:
    branches: [ main ]
    tags:     [ 'v*' ]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write   # for creating a GitHub release when a tag is pushed

concurrency:
  group: pypi-publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: pyproject.toml

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # Detect if the version file changed on this push (used to gate publishing on branch pushes)
      - name: Detect version file change
        id: changed
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        shell: bash
        run: |
          set -euo pipefail
          FILE="src/sandroid/__about__.py"
          # Try to fetch a previous commit for diff (shallow clone safety)
          git fetch --no-tags --prune --depth=2 origin "${GITHUB_REF#refs/heads/}:${GITHUB_REF#refs/heads/}" || true

          BEFORE="${{ github.event.before }}"
          if [[ "$BEFORE" == "0000000000000000000000000000000000000000" || -z "$BEFORE" ]]; then
            BEFORE="$(git rev-parse HEAD^ || echo "")"
          fi

          if [[ -n "$BEFORE" ]]; then
            CHANGED="$(git diff --name-only "$BEFORE" "$GITHUB_SHA" | grep -Fx "$FILE" || true)"
          else
            CHANGED="$(git ls-files "$FILE" || true)"
          fi

          if [[ -n "$CHANGED" ]]; then
            echo "about_changed=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Detected change in $FILE"
          else
            echo "about_changed=false" >> "$GITHUB_OUTPUT"
            echo "‚ÑπÔ∏è  No change in $FILE"
          fi

      - name: Extract package version from __about__.py
        id: get_version
        shell: bash
        run: |
          set -euo pipefail
          VERSION="$(python - <<'PY'
          import re, pathlib
          p = pathlib.Path('src/sandroid/__about__.py')
          m = re.search(r"__version__\s*=\s*['\"]([^'\"]+)['\"]", p.read_text())
          print(m.group(1) if m else "", end="")
          PY
          )"
          if [[ -z "$VERSION" ]]; then
            echo "Could not read __version__ from src/sandroid/__about__.py"
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "üì¶ Package version: $VERSION"

      - name: If tag/release, validate tag matches package version
        if: github.ref_type == 'tag' || github.event_name == 'release'
        shell: bash
        run: |
          PKG_VERSION="${{ steps.get_version.outputs.version }}"
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_VERSION="${GITHUB_REF#refs/tags/}"
            TAG_VERSION="${TAG_VERSION#v}"
          else
            TAG_VERSION="${{ github.event.release.tag_name }}"
            TAG_VERSION="${TAG_VERSION#v}"
          fi
          echo "üè∑Ô∏è Tag version: $TAG_VERSION"
          [[ "$TAG_VERSION" == "$PKG_VERSION" ]] || { echo "‚ùå Version mismatch: tag ($TAG_VERSION) != package ($PKG_VERSION)"; exit 1; }
          echo "‚úÖ Tag matches package version"

      - name: Check if version already exists on PyPI
        id: pypi_check
        env:
          PROJECT_NAME: Sandroid
          VERSION: ${{ steps.get_version.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          EXISTS=$(python - <<'PY'
          import json, os, urllib.request
          name = os.environ["PROJECT_NAME"]
          ver  = os.environ["VERSION"]
          try:
              with urllib.request.urlopen(f"https://pypi.org/pypi/{name}/json", timeout=10) as r:
                  data = json.load(r)
              print("true" if ver in (data.get("releases") or {}) else "false")
          except Exception:
              print("false")
          PY
          )
          echo "exists=$EXISTS" >> "$GITHUB_OUTPUT"
          if [[ "$EXISTS" == "true" ]]; then
            echo "‚ö†Ô∏è Version $VERSION already on PyPI. Build will continue, publish will be skipped."
          fi

      - name: Build package
        run: python -m build

      - name: Check distribution
        run: python -m twine check dist/*

      # Manual test uploads
      - name: Publish to Test PyPI
        if: github.event_name == 'workflow_dispatch'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: python -m twine upload --repository testpypi dist/*

      # Publish to PyPI when:
      # - tag push, OR release published, OR (branch push AND __about__.py changed)
      # AND the version isn't already on PyPI
      - name: Publish to PyPI
        if: |
          steps.pypi_check.outputs.exists != 'true' && (
            startsWith(github.ref, 'refs/tags/') ||
            github.event_name == 'release' ||
            (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/') && steps.changed.outputs.about_changed == 'true')
          )
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload dist/*

      - name: Create GitHub Release (for tag pushes)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
