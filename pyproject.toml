[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "Sandroid"
version = "1.0.0"
description = "A powerful Android sandbox framework designed to extract forensic artifacts from Android Virtual Devices (AVDs) and support common sandboxing functionalities."
authors = [
    {name = "Erik Nathrath", email = "erik.nathrath@fkie.fraunhofer.de"},
    {name = "Daniel Baier", email = "daniel.baier@fkie.fraunhofer.de"},
    {name = "Jan-Niclas Hilgert", email = "jan-niclas.hilgert@fkie.fraunhofer.de"}
]
maintainers = [
    {name = "Erik Nathrath", email = "erik.nathrath@fkie.fraunhofer.de"},
    {name = "Daniel Baier", email = "daniel.baier@fkie.fraunhofer.de"},
    {name = "Jan-Niclas Hilgert", email = "jan-niclas.hilgert@fkie.fraunhofer.de"}
]
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["android", "forensics", "security", "malware", "analysis", "frida", "emulator"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Monitoring",
]
requires-python = ">=3.10"

# Core dependencies
dependencies = [
    "beautifulsoup4>=4.12.2",
    "bs4>=0.0.1",
    "certifi>=2023.11.17",
    "charset-normalizer>=3.3.2",
    "click>=8.1.7",
    "colorama>=0.4.6",
    "frida>=16.1.10",
    "frida-tools>=12.3.0,<14.0.0",
    "idna>=3.6",
    "lxml>=4.9.4",
    "prompt-toolkit>=3.0.43",
    "Pygments>=2.17.2",
    "python-dateutil>=2.8.2",
    "requests>=2.31.0",
    "scapy>=2.5.0",
    "six>=1.16.0",
    "soupsieve>=2.5",
    "urllib3>=2.1.0",
    "wcwidth>=0.2.12",
    "xmldiff>=2.7.0",
    "tqdm>=4.64.0",
    "reportlab>=4.0.0",
    "geopy>=2.3.0",
    "friTap>=1.3.1.4,<2.0.0",
    "colorlog>=6.7.0",
    "objection>=1.11.0,<2.0.0",
    "AndroidFridaManager>=0.2.0",
    "trigdroid[full]>=1.0.0",
    "dexray-intercept>=1.0.0",
    "dexray-insight>=1.0.0",
    "tomli>=2.0.1; python_version<'3.11'",
    "tomli-w>=1.0.0",
    "pyyaml>=6.0",
    "pydantic>=2.0.0",
    "platformdirs>=3.0.0",
    "rich>=13.0.0",
]

# Optional dependencies for different use cases
[project.optional-dependencies]
ai = [
    "google-generativeai>=0.3.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]

# Entry points for CLI commands
[project.scripts]
sandroid = "sandroid.cli:main"
sandroid-config = "sandroid.config.cli:main"

[project.urls]
Homepage = "https://github.com/fkie-cad/Sandroid_core"
Documentation = "https://https://fkie-cad.github.io/Sandroid_core/"
Repository = "https://github.com/fkie-cad/Sandroid_core.git"
"Bug Tracker" = "https://github.com/fkie-cad/Sandroid_core/issues"

# Setuptools configuration
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["sandroid*"]

[tool.setuptools.package-data]
sandroid = ["config/*.yaml", "config/*.toml", "templates/*.html"]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'
extend-exclude = '''
/(
    # directories
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.10"
# Extremely permissive configuration for legacy codebase - disable all checking
ignore_errors = true
ignore_missing_imports = true
follow_imports = "skip"
# Disable all warnings and checks
warn_return_any = false
warn_unused_configs = false
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
# Skip error reporting entirely
show_error_codes = false

# All errors are ignored globally, overrides not needed

[tool.coverage.run]
source = ["src/sandroid"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "S",   # bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "RUF", # ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D205", # 1 blank line required between summary line and description
    "D415", # First line should end with a period, question mark, or exclamation point
    "S101", # Use of assert detected
    "T201", # print found
    "T203", # pprint found
    "E501", # Line too long (compatibility with existing codebase)
    "E402", # Module level import not at top of file (needed for toolbox init)
    "E722", # Do not use bare except (legacy exception handling)
    "F841", # Local variable assigned but never used
    "G003", # Logging % formatting (legacy logging style)
    "G004", # Logging f-string format (legacy logging style)
    "N802", # Function name should be lowercase (legacy naming)
    "N806", # Variable name should be lowercase (legacy naming)
    "N815", # Variable name mixed case (legacy naming)
    "A001", # Variable shadows Python builtin (legacy variable names)
    "A002", # Argument shadows Python builtin (legacy parameter names)
    "B007", # Loop control variable not used within loop body
    "S113", # Request timeout not specified (legacy request handling)
    "S324", # Use of insecure MD5 hash (needed for forensic compatibility)
    "S602", # subprocess call with shell=True (legitimate system calls)
    "S603", # subprocess call without shell check (legitimate controlled usage)
    "S605", # Start process with shell (legitimate system operations)
    "S607", # Start process with partial path (system standard tools)
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR1722", # Use sys.exit() instead of exit()
    "PLR2004", # Magic value used in comparison (legacy constants)
    "SIM103", # Return condition directly (legacy control flow)
    "SIM108", # Use ternary operator (legacy if-else style)
    "SIM115", # Use context manager for opening files (legacy file handling)
    "PTH100", "PTH104", "PTH110", "PTH111", "PTH118", "PTH123", # Path modernization (gradual migration)
    "FBT002", # Boolean default positional argument (legacy function signatures)
    "RUF005", # Consider unpacking instead of concatenation (legacy list operations)
    "RUF012", # Mutable class attributes should use ClassVar (legacy class design)
    "TRY300", # Consider moving to else block (legacy exception handling)
    "TRY400", # Use logging.exception instead of logging.error (legacy logging)
    "ERA001", # Commented-out code (legacy debugging code)
    "D419", # Empty docstring (legacy documentation)
    "E711", "E712", # None/bool comparison style (legacy comparison patterns)
    "PLC0415", # Import should be at top-level (legacy conditional imports)
    "BLE001", # Do not catch blind exception (legacy exception handling)
    "B025", # Duplicate try-except blocks (legacy exception handling)
    "TRY003", # Avoid specifying long messages outside the exception class (legacy exceptions)
    "SLF001", # Private member accessed (legacy encapsulation patterns)
    "EM101", "EM102", # Exception message formatting (legacy exception handling)
    "RET504", # Unnecessary assignment before return (legacy return patterns)
    "FBT001", # Boolean type hint positional argument (legacy function signatures)
    "PTH103", "PTH107", "PTH113", "PTH119", "PTH120", "PTH208", # Additional path modernization
    "PIE810", # Multiple starts-ends-with calls (legacy string checking)
    "UP031", # Printf string formatting (legacy string formatting)
    "F401", # Unused import (legacy imports)
    "RUF046", # Unnecessary cast to int (legacy type handling)
    "SIM118", # Use dict.get() instead of conditional (legacy dict access)
    "DTZ005", # Call datetime.now() without timezone (legacy datetime usage)
    "N803", "N805", "N801", "N813", "N817", "N999", # Naming convention issues (legacy naming)
    "ARG001", "ARG002", "ARG003", "ARG004", # Unused function arguments (legacy interfaces)
    "PLW0602", "PLW0603", "PLW2901", "PLR0911", # Pylint warnings (legacy code patterns)
    "UP022", "UP038", # pyupgrade modernization (gradual migration)
    "SIM102", "SIM105", "SIM113", "SIM201", # Code simplification suggestions (legacy patterns)
    "B015", "B904", # Exception handling patterns (legacy error handling)
    "TRY002", "TRY301", # Exception handling recommendations (legacy patterns)
    "PTH109", "PTH112", # Additional path modernization (gradual migration)
    "RUF013", "RUF015", # Ruff-specific recommendations (gradual adoption)
    "PLC0206", # Dictionary iteration patterns (legacy code style)
    "PLR1714", # Comparison simplification (legacy comparison patterns)
    "PIE794", # Multiple starts/ends with (legacy string handling)
    "ICN001", # Import conventions (legacy import style)
    "S112", # Request without timeout continuation (legacy error handling)
    "EXE001", # Shebang presence (deployment scripts)
    "E741", # Ambiguous variable names (legacy variable naming)
    "S110", # Try-except-pass (acceptable in deployment/optional functionality)
    "COM812", # Missing trailing comma (conflicts with formatter)
    "ISC001", # Implicitly concatenated string literals (conflicts with formatter)
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "env",
    "ground_truth_src",
]

# Per-file ignores for deployment scripts
[tool.ruff.lint.per-file-ignores]
"deploy/create_avd.py" = [
    "S603",   # subprocess calls are intentional for SDK management
    "S607",   # partial paths for curl/powershell are system standard
    "S310",   # URL open is for legitimate Android SDK downloads
    "S110",   # try-except-pass is acceptable for optional functionality
    "BLE001", # General exceptions acceptable in deployment scripts
    "TRY300", # Early returns are preferred style in this script
    "FBT002", # Boolean arguments are clear in this context
    "PLC0415", # certifi import is conditional and acceptable
    "PTH110", "PTH111", "PTH112", "PTH113", "PTH118", "PTH123", "PTH107", # Path modernization can be gradual
    "PTH100", "PTH116", "PTH119", "PTH120", "PTH202", "PTH208", # Path modernization can be gradual
    "PLR2004", # Magic numbers (API levels) are clear in context
    "B007",   # Unused loop variables are acceptable
    "D205",   # Docstring formatting is less critical for deployment scripts
    "E501",   # Long lines acceptable for deployment script output
    "F811",   # Variable redefinition acceptable in exception handling
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["sandroid"]
force-single-line = false
force-sort-within-sections = false
single-line-exclusions = ["typing"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 15
max-returns = 8
max-statements = 60

# Bandit configuration for security linting
[tool.bandit]
exclude_dirs = ["tests", "ground_truth_src"]
skips = [
    "B605",  # Allow os.system for terminal screen clearing
    "B324",  # Allow MD5 for forensic compatibility
    "B113",  # Allow requests without timeout for forensic operations
    "B404",  # Allow subprocess module for system administration
    "B405",  # Allow XML parsing for forensic Android XML analysis
    "B410",  # Allow lxml.etree for forensic XML diff analysis
    "B602",  # Allow subprocess with shell=True for system tools
    "B603",  # Allow subprocess without shell check for controlled usage
    "B607",  # Allow partial executable paths for system standard tools
    "B110",  # Allow try-except-pass for optional functionality
    "B112",  # Allow try-except-continue for error handling
    "B311",  # Allow standard random for non-cryptographic sampling
]

# Per-file exclusions for legitimate tool usage
[[tool.bandit.overrides]]
# Allow shell=True for legitimate ADB and emulator commands
paths = ["src/utils/adb.py", "src/utils/toolbox.py", "src/utils/frida_manager.py"]
skip_tests = ["B602"]

[[tool.bandit.overrides]]
# Forensic tools need HTTP requests without timeouts for operations
paths = ["src/utils/apk_downloader.py", "src/utils/frida_manager.py", "src/utils/fsmon.py"]
skip_tests = ["B113"]

[[tool.bandit.overrides]]
# Terminal screen clearing is safe
paths = ["src/sandroid/cli.py", "src/utils/actionQ.py"]
skip_tests = ["B605"]

[[tool.bandit.overrides]]
# Forensic tools need MD5 for compatibility
paths = ["src/utils/toolbox.py"]
skip_tests = ["B324"]

[[tool.bandit.overrides]]
# Deployment script needs subprocess, urllib, and process execution
paths = ["deploy/create_avd.py"]
skip_tests = ["B404", "B603", "B607", "B310", "B110"]
